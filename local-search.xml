<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>到达首都的最少油耗</title>
    <link href="/2023/12/07/%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%91%E6%B2%B9%E8%80%97/"/>
    <url>/2023/12/07/%E5%88%B0%E8%BE%BE%E9%A6%96%E9%83%BD%E7%9A%84%E6%9C%80%E5%B0%91%E6%B2%B9%E8%80%97/</url>
    
    <content type="html"><![CDATA[<p>leetcode：2477</p><h2 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h2><p>Lambda 函数是一种匿名函数，它可以在 C++ 中方便地定义和使用。Lambda 函数的语法形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[capture](parameters) -&gt; return_type &#123;<br>    <span class="hljs-comment">// 函数体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>capture</code>：捕获列表，用于捕获外部变量。可以是空列表、值捕获、引用捕获或混合捕获。</li><li><code>parameters</code>：函数参数列表。</li><li><code>return_type</code>：返回类型。</li><li><code>&#123;&#125;</code>：函数体。</li></ul><p>Lambda 函数具有以下特点：</p><ol><li><strong>匿名性：</strong> Lambda 函数是匿名的，不需要使用函数名来定义。</li><li><strong>局部定义：</strong> 它可以在代码的任何地方定义，即在需要使用的地方定义，不必提前声明。</li><li><strong>捕获外部变量：</strong> 可以通过捕获列表捕获外部变量，使其在 Lambda 函数内部可用。</li><li><strong>自动推导类型：</strong> 不必显式指定参数和返回类型，编译器可以自动推导。</li></ol><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Lambda 函数示例</span><br>    <span class="hljs-keyword">auto</span> add = [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">int</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;;<br><br>    std::cout &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) &lt;&lt; std::endl;  <span class="hljs-comment">// 输出 7</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>add</code> 是一个 Lambda 函数，接受两个整数参数并返回它们的和。Lambda 函数通过 <code>auto</code> 关键字自动推导类型。</p>]]></content>
    
    
    <categories>
      
      <category>刷题(自用)</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单词</title>
    <link href="/2023/12/06/%E8%8B%B1%E8%AF%AD/"/>
    <url>/2023/12/06/%E8%8B%B1%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="公司团建"><a href="#公司团建" class="headerlink" title="公司团建"></a>公司团建</h2><p>管理者越来越喜欢举办团建，但有些员工非常<strong>resent</strong>这种<strong>compulsory</strong>的<strong>bond</strong>，并且通常把它看做一件<strong>nuisance</strong>。<br>有一篇论文，报告了员工对于团建<strong>intervention</strong>的感受，并<strong>reveal</strong>了强迫员工参与团建的<strong>ethical</strong>问题<br>有相关研究发现专注于分享和<strong>intervene</strong>团队队员之间的个人态度和关系的团建被认为是拙劣且有<strong>intrusive</strong>。虽然研究人员认为一定程度上的开放性及<strong>vulnerability</strong>是有益于同事发展深入的、有效的关系。</p><ul><li>resent：Vt.怨恨 </li><li>compulsory：adj.强制的 </li><li>bon：n&#x2F;v.纽带，链接</li><li>nuisance：n.麻烦事</li><li>intervention：n.干预</li><li>reveal：v.揭示</li><li>ethical：adj.道德的</li><li>intervene：v.干预</li><li>intrusive：adj.有侵略性的</li><li>vulnerability：n.弱点</li></ul><h2 id="饮食健康"><a href="#饮食健康" class="headerlink" title="饮食健康"></a>饮食健康</h2><p><strong>nutritionist</strong>哈利·帕斯捷尔纳走访了几个健康水平较高的国家，深入了解是什么让他们的饮食有<strong>nourishing</strong>。<br>美国人会比其他国家的人吃得<strong>portion</strong>更多。他们不会<strong>prioritize</strong>吃季节性和<strong>regional</strong>的食物，并且会在食物中添加大量的盐，糖和<strong>agent</strong>。<br>在传统的地中海饮食包括水果、蔬菜、<strong>grain</strong>和<strong>red wine</strong><br>很多健康饮食文化也会把吃饭视为一件大事，比如准备<strong>multiple</strong>菜，而不是<strong>hostily</strong>并且<strong>handle</strong><br>每个健康饮食文化都有其<strong>unique</strong>的<strong>feature</strong></p><ul><li>nutritionist：n.营养学家</li><li>nourishing：adj.有营养的</li><li>portion：n.一部分</li><li>prioritize：V.优先考虑</li><li>regional：adj.地区的</li><li>agent：n.代理人；剂</li><li>grain：n.谷物</li><li>wine：n.葡萄酒</li><li>multiple：adj.多个的</li><li>hostily：adv.匆忙地</li><li>handle：n.一把，少量的</li><li>unique：adj.独一无二的</li><li>feature：n.特点</li></ul>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>清单</title>
    <link href="/2023/12/06/%E6%B8%85%E5%8D%95/"/>
    <url>/2023/12/06/%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<ul><li>leetcode：389位运算</li></ul>]]></content>
    
    
    <categories>
      
      <category>清单</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dots_and_boxes</title>
    <link href="/2023/12/06/dots-and-boxes/"/>
    <url>/2023/12/06/dots-and-boxes/</url>
    
    <content type="html"><![CDATA[<p><em><strong>自用</strong></em></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><ul><li><p>botzone：AI对战平台</p></li><li><p>了解Windows消息处理机制</p></li><li><p>Windows API GUI相关API</p><ul><li>在Windows API中程序入口点不是main而是<strong>WinMain</strong>(wWinMain宽字符体版本：用两个字节表示一个字符)。<ul><li>其包含的参数：<ol><li>Instance实例：静态程序exe打开后所运行的窗口</li><li>handle句柄：对于每一个实例都有对应的handle，类似于int，用唯一的整数来标识资源</li><li>PrevInstance：该实例的上一个实例</li><li>CmdLine：命令行后跟参数</li><li>CmdShow：显示方式</li></ol></li></ul></li></ul></li><li><p>LoadStringW：读取字符串资源</p></li><li><p>MyRegisterClass：注册窗口类(先定义窗口类，在对窗口进行个性化)</p></li><li><p>定义窗口类：struct WndClass</p></li><li><p>注册窗口类：RegisterClass</p></li><li><p>创建窗口：CreateWindow</p></li><li><p>显示窗口：ShowWindow</p></li><li><p>更新窗口：UpdateWindow</p></li><li><p>进入消息循环</p></li><li><p>WinMain instance实例 handle句柄</p></li><li><p>消息队列</p></li></ul><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><ul><li><p>在WndProc中绘制棋盘</p><ul><li>创建”画布”：<code>HDC mdc = CreateCompatibleDC(hdc);</code>。</li><li>引入棋盘(外部图片)<code>HBITMAP hbitmap = (HBITMAP)LoadImage(NULL, &quot;文件名及后缀&quot;, IMAGE_BITMAP, cx, cx, LR_LOADFROMFILE)</code>。</li><li>使用<code>SelectObject(mdc, hbitmap)</code>将画布<code>mdc</code>与该图片<code>hbitmap</code>相关联。- 使用<code>BitBlt(hdc, x, y, cx, cy, mdc, 0, 0, SRCCOPY)</code>进行显示，x，y为打印在画布的位置。</li></ul></li><li><p>落子</p><ul><li>定义一个全局二维数组，记录落子的逻辑位置(而非像素位置)。</li><li>增加一个消息<code>case WM_LBUTTONDOWN</code>(鼠标左键点击消息)，创建下x，y表示坐标，用<code>x = LOWORD(lParam)</code>，<code>y = HIWORD(lParam)</code>使x，y获取像素坐标</li></ul><p>  <code>二 26：49</code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>可获得的最大点数</title>
    <link href="/2023/12/03/%E5%8F%AF%E8%8E%B7%E5%BE%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E6%95%B0/"/>
    <url>/2023/12/03/%E5%8F%AF%E8%8E%B7%E5%BE%97%E7%9A%84%E6%9C%80%E5%A4%A7%E7%82%B9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>Leetcode：1423</p><ul><li>‘accumulate(,,)’</li><li>‘min(,)’</li></ul><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate()"></a>accumulate()</h2><p><strong>可替换遍历数组求和的情况，所需时间可能会短一些</strong><br>头文件：’numeric’</p><p>一般形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function">T <span class="hljs-title">accumulate</span><span class="hljs-params">(InputIt first, InputIt last, T init)</span></span>;<br></code></pre></td></tr></table></figure><p>‘accumulate’函数将指定范围’[first, last]’中的元素相加，并返回结果，init为初始值。<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; numbers = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>    <span class="hljs-comment">// 使用 accumulate 计算数组元素的总和</span><br>    <span class="hljs-type">int</span> sum = std::<span class="hljs-built_in">accumulate</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Sum: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题(自用)</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第五章设备管理</title>
    <link href="/2023/12/02/%E7%AC%AC%E4%BA%94%E7%AB%A0%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/"/>
    <url>/2023/12/02/%E7%AC%AC%E4%BA%94%E7%AB%A0%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2023/12/01/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2023/12/01/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是哈希表-散列表查找-？"><a href="#什么是哈希表-散列表查找-？" class="headerlink" title="什么是哈希表(散列表查找)？"></a>什么是哈希表(散列表查找)？</h2><ul><li>在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字key对应一个存储位置f(key)。</li><li>简单说，就是将数据存储的位置与数据本身建立某种关系f，使得我们可以通过数据本身找到数据储存位置。</li><li>对应关系f称为散列函数(哈希函数)。</li><li>采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表。</li></ul><h2 id="为什么要引入哈希表？"><a href="#为什么要引入哈希表？" class="headerlink" title="为什么要引入哈希表？"></a>为什么要引入哈希表？</h2><ul><li>在顺序表和有序表中进行查找时，都不可避免要进行”比较”，从而可能提高算法的时间复杂度，因此需要一种可以直接通过关键字key来查找记录的内存存储位置的方法。</li></ul><h2 id="散列表查找的步骤"><a href="#散列表查找的步骤" class="headerlink" title="散列表查找的步骤"></a>散列表查找的步骤</h2><ol><li>存储时：通过同样的散列函数计算记录的散列地址，并按此散列地址存储该记录。</li><li>查找时：通过同样的散列函数计算记录的散列地址，按此散列地址访问该记录。</li></ol><ul><li><strong>散列技术的适用情况</strong>：<ul><li>散列技术既是一种存储方法，也是一种查找方法。散列技术的记录之间没有逻辑关系，其只与关键字有关联。故，<strong>散列技术最适合求解的问题是查找与给定值相等的情况</strong>，不适用与一个关键字对应很多记录的情况和范围查找。</li></ul></li></ul><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><ul><li>理想情况下，每个关键字通过散列函数计算出的地址都是不一样的。但现实中存在<strong>两个关键字”key1 !&#x3D; key2”，但却有”f(key1) &#x3D; f(key2)”的情况</strong>，这种现象称为冲突，并把”key1”，”key2”称为这个散列函数的同义词。</li></ul><h2 id="处理散列冲突的方法"><a href="#处理散列冲突的方法" class="headerlink" title="处理散列冲突的方法"></a>处理散列冲突的方法</h2><ul><li>开放定址法：一旦发生冲突，就去寻找另一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入<ul><li>fi(key) &#x3D; (f(key) + di) mod m; ( di &#x3D; 1,2,3…m-1)</li></ul></li></ul><ol><li>线性探测法：<ul><li>在发生冲突时，寻找下一个相邻的散列地址，若该散列地址为空，则存入，否则继续寻找。</li><li><strong>堆积</strong>：本不是同义词的却争取同一个地址的情况</li><li>缺点：由于堆积的存在，需不断处理冲突，降低效率</li></ul></li><li>二次探测法：(后续补充)<ul><li>对线性探测法的改进，</li></ul></li><li>随机探测法：<ul><li>发生冲突时，di采用随机函数计算得到</li></ul></li><li>再散列函数法：<ul><li>准备多个散列表，在发生散列地址冲突时，就换一个散列表进行计算</li></ul></li><li>链地址法：<ul><li>将所有关键词为同义词的记录存储在一个单链表中(该表称作<strong>同义词子表</strong>)</li><li>优点：对于可能会造成很多冲突的散列函数，提供了绝不会出现找不到地址的保障</li><li>缺点：带来了查找时需要遍历单链表的性能损耗</li></ul></li><li>公共溢出区法：<ul><li>为有冲突的关键词建立一个公共的溢出区来存放</li><li>适用于冲突数据很少的情况</li></ul></li></ol><h2 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h2><ul><li>什么是好的构造函数？<ol><li>计算简单</li><li>散列地址分布均匀</li></ol></li></ul><ol><li>直接地址法<ul><li>取关键字的某个线性函数值为散列地址</li><li>优点：简单、均匀，不会产生冲突</li><li>缺点：需事先知道关键字的分布情况，适合查找表较小且连续的情况</li><li>此方法虽简单，但不常用</li></ul></li><li>数字分析法<ul><li>适用于关键字位数较多的情况，从关键字中抽取一部分，根据情况可对抽取的数据进行反转、右环位移、左环位移或叠加等处理来避免冲突</li><li>适合处理关键字位数比较多的情况，事先知道关键字的分布，且关键字的若干位分布均匀</li></ul></li><li>平方取中法<ul><li>取关键字的平方的中间几位</li><li>适用于不知道关键字的分布，而位数不多的情况</li></ul></li><li>折叠法<ul><li>将关键字从左到右分割成位数相等的几部分(最后一位位数不够可以短一些)，然后将这几部分叠加求和，并按列表表长，取最后几位作为散列地址</li><li>事先不需知道关键字的分布，适合关键字位数较多的情况</li></ul></li><li>除留余数法<ul><li>f(key) &#x3D; key mod p(p &lt;&#x3D; m) m为散列表长，p一般小于或等于表长(最好接近m)的最小质数或不包含小于20质因数的合数</li><li>**最常见的构造散列函数的方法</li></ul></li><li>随机数法<ul><li>选择一个随机数，取关键字的随机函数值作为它的散列地址</li><li>适用于关键字长度不等时</li></ul></li></ol><h2 id="散列表查找的实现"><a href="#散列表查找的实现" class="headerlink" title="散列表查找的实现"></a>散列表查找的实现</h2><ol><li><p>定义散列表的结构以及一些相关的常数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCCESS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UNSUCCESS 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HASHSIZE 12     <span class="hljs-comment">/*自定义哈希表长度*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULLKEY -32768</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> *elem;      <span class="hljs-comment">//数据元素存储基址，动态分配数组</span><br>    <span class="hljs-type">int</span> count;      <span class="hljs-comment">//当前元素个数</span><br>&#125;HashTable;<br><br><span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;          <span class="hljs-comment">//散列表表长，全局变量</span><br></code></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitHashTable</span><span class="hljs-params">(HashTable *H)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    m = HASHSIZE;<br>    H-&gt;<span class="hljs-built_in">cout</span> = m;<br>    H-&gt;elem = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(m*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        H-&gt;elem[i] = NULLKEY;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>插入操作</p><ul><li>定义散列函数 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Hash</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> key % m;     <span class="hljs-comment">//除留余数法</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>插入操作 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InsertHash</span><span class="hljs-params">(HashTable *H, <span class="hljs-type">int</span> key)</span><br>&#123;<br>    <span class="hljs-type">int</span> addr = Hash(key);<br>    <span class="hljs-keyword">while</span>(H-&gt;elem[addr] != NULLKEY)<br>    &#123;<br>        addr = (addr + <span class="hljs-number">1</span>) % m;<br>    &#125;<br>    H-&gt;elem[addr] = key;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>通过散列表的查找操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SearchHash</span><span class="hljs-params">(HashTable *H, <span class="hljs-type">int</span> key, <span class="hljs-type">int</span> *addr)</span><br>&#123;<br>    *addr = Hash(key);<br>    <span class="hljs-keyword">while</span>(H.elem[*addr] != key)<br>    &#123;<br>        *addr = (*addr + <span class="hljs-number">1</span>) % m;<br>        <span class="hljs-keyword">if</span>(H.elem[*addr] == NULLKEY || *addr == Hash(key))<br>            <span class="hljs-keyword">return</span> UNSUCCESS;<br>    &#125;<br>    <span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="散列查找的性能分析"><a href="#散列查找的性能分析" class="headerlink" title="散列查找的性能分析"></a>散列查找的性能分析</h2><ol><li>散列函数是否均匀</li><li>处理冲突的方法</li><li>散列表装填因子<ul><li>装填因子：填入表的记录个数与散列表长度的比。</li><li>装填因子越大，发生冲突的可能性越大。故，常采取降低装填因子的大小，即将散列表的空间设置得比查找集合大，虽浪费了一定的空间但换来的是查找效率的提高</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2023/11/29/%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/11/29/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要引入链表？"><a href="#为什么要引入链表？" class="headerlink" title="为什么要引入链表？"></a>为什么要引入链表？</h2><ul><li>线性表顺序存储结构在进行插入和删除操作时需要移动的大量的元素</li><li>当线性表长度变化较大时，难以确定存储空间的大小</li><li>会造成存储空间的“碎片”。(主要与数组的特性有关)<ol><li>固定大小：数组在创建时需要指定大小，且大小时固定的。若实际存储的元素数量比数组的大小小，就会导致未使用的部分出现“空白”或“碎片”</li><li>插入操作：在数组中插入一个新元素时，可能需要将插入位置后的所有元素都向后移动一个位置，可能会导致已有元素的间隙中留下未使用的空间</li><li>删除操作：从数组总删除一个元素，同样可能会导致出现空隙</li><li>不连续的插入操作：在不断进行插入和删除操作时，可能会导致数组中的元素分布较为分散，形成不连续的空间，使得整体存储空间利用不够充分</li></ol></li></ul><h2 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h2><p>一种常见的数据结构，用于在内存中组织和存储数据。其由一系列结点组成，每个结点包含：<strong>数据域</strong>(存储数据元素)和<strong>指针域</strong>(指向下一个节点的指针)。链表允许在内存中非连续地存储数据，相较于顺序存储结构，其更加灵活，更容易进行插入和删除操作。</p><h2 id="头指针与头节点"><a href="#头指针与头节点" class="headerlink" title="头指针与头节点"></a>头指针与头节点</h2><ul><li>头指针：链表中第一个结点的存储位置</li><li>头节点：在单链表的第一个结点前附设的一个结点，头结点的数据域可以用于存储线性表长度等附加信息，也可以不存储任何数据</li><li>两者的异同：<ul><li>头指针：<ol><li>链表中指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</li><li>头指针具有标志作用，所以常用头指针冠以链表的名字</li><li>无论链表是否为空，头指针均不为空。<strong>头指针是链表的必要元素</strong></li></ol></li><li>头结点：<ol><li>为操作的统一和方便而设立的，放在第一元素的结点之前</li><li>有了头结点，对在第一元素结点前插入和删除结点的操作与其他结点的操作就统一了</li><li>头结点不一定是链表的必要元素</li></ol></li></ul></li><li>对于最后一个结点，意味着直接后继不存在，故规定，线性链表的最后一个结点指针为“空”(通常用NULL或”^”表示)</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*单链表的存储结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> date;       <span class="hljs-comment">//此处假设data为int型变量，实际根据需要选择数据类型</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;  <span class="hljs-comment">//指向下一节点的指针</span><br>&#125;Node;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *LinkList;  <span class="hljs-comment">//LinkList为指向结构体Node的指针</span><br></code></pre></td></tr></table></figure><h3 id="单链表的整表创建"><a href="#单链表的整表创建" class="headerlink" title="单链表的整表创建"></a>单链表的整表创建</h3><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><p>从头结点后面添加结点<br>算法思路</p><ol><li>声明——指针p和计数器变量i</li><li>初始化——空链表L</li><li>让L的头结点的头指针指向NULL，即建立一个带头结点的单链表</li><li>循环<ol><li>生成一个新结点赋值给p</li><li>给p的数据域赋值(此例中为随机赋值)</li><li>将p插入到头结点与前一新结点之间</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CreateListHead</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    LinkList p;<br>    <span class="hljs-type">int</span> i;<br>    srand(time(<span class="hljs-number">0</span>));<br>    *L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    (*L)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        p = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node))<br>        p-&gt;data = rand()%<span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<br>        p-&gt;next = (*L)-&gt;next;<br>        (*L)-&gt;next = p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><p>在最后一个结点后添加结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CreatListTail</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    LinkList p, r;<br>    <span class="hljs-type">int</span> i;<br>    srand(time(<span class="hljs-number">0</span>));<br>    *L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    r = *L;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        p = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        p-&gt;data = rand()%<span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<br>        r-&gt;next = p;<br>        r = p;<br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表的整表删除"><a href="#单链表的整表删除" class="headerlink" title="单链表的整表删除"></a>单链表的整表删除</h3><p>算法思路</p><ol><li>声明——指针p和q</li><li>将第一个结点赋值给p</li><li>循环<ol><li>将下一结点赋值给q</li><li>释放p</li><li>将q赋值给p</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ClearList</span><span class="hljs-params">(LinkList *L)</span><br>&#123;<br>    LinkList p, q;<br>    p = (*L)-&gt;next;<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        q = p-&gt;next;<br>        <span class="hljs-built_in">free</span>(p);<br>        p = q;<br>    &#125;<br>    (*L)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表的读取"><a href="#单链表的读取" class="headerlink" title="单链表的读取"></a>单链表的读取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> i, ElemType *e)</span><br>&#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p;<br>    p = L-&gt;next;<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)<br>    &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p || j &gt; i)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    *e = p-&gt;data;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> i, ElemType *e)</span><br>&#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p, s;<br>    p = (*L);<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)<br>    &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p || j &gt; i)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <br>    s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    s-&gt;data = e;<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> i, ElemType *e)</span><br>&#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p, q;<br>    p = (*L);<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)<br>    &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p || j &gt; i)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <br>    q = p-&gt;next;<br>    p-&gt;next = q-&gt;next;<br>    *e = q-&gt;data<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四章存储管理</title>
    <link href="/2023/11/26/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <url>/2023/11/26/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>(<em><strong>只列举相关的知识点，定义啥的，以后再来补充</strong></em>)<br>引入：存储管理是计算机系统的重要组成部分，用于存储包括程序和数据在内的各种信息，亦属于非常重要的系统资源。</p><h2 id="4-1程序的链接和接入"><a href="#4-1程序的链接和接入" class="headerlink" title="4.1程序的链接和接入"></a>4.1程序的链接和接入</h2><p>引入：要使源程序能够运行，必须经过：<strong>编译</strong>、<strong>链接</strong>和<strong>装入</strong></p><h3 id="4-1-1逻辑地址、物理地址和虚拟地址"><a href="#4-1-1逻辑地址、物理地址和虚拟地址" class="headerlink" title="4.1.1逻辑地址、物理地址和虚拟地址"></a>4.1.1逻辑地址、物理地址和虚拟地址</h3><ol><li>逻辑地址(相对地址)</li><li>逻辑地址空间</li><li>物理地址</li><li>物理地址空间</li><li>虚拟地址空间和虚拟地址</li></ol><h3 id="4-1-2程序链接"><a href="#4-1-2程序链接" class="headerlink" title="4.1.2程序链接"></a>4.1.2程序链接</h3><p>链接程序在将几个模块装配成一个装入模块时，需解决以下问题：</p><ol><li>修改模块的相对地址</li><li>变换外部调用符号</li></ol><p>根据对目标模块的链接时间不同进行分类：</p><ol><li>静态链接</li><li>装入时动态链接</li><li>运行时动态链接</li></ol><h3 id="4-1-3程序装入"><a href="#4-1-3程序装入" class="headerlink" title="4.1.3程序装入"></a>4.1.3程序装入</h3><p>装入后，要实行地址转换操作(被称为：地址映射、地址变换或重定位)<br>根据地址变换的时间进行分类：</p><ol><li>静态重定位</li><li>动态重定位</li></ol><h2 id="4-2分区式存储管理"><a href="#4-2分区式存储管理" class="headerlink" title="4.2分区式存储管理"></a>4.2分区式存储管理</h2><p>对内存采用连续分配方式</p><h3 id="4-2-1单一连续分区存储管理"><a href="#4-2-1单一连续分区存储管理" class="headerlink" title="4.2.1单一连续分区存储管理"></a>4.2.1单一连续分区存储管理</h3><ol><li>实现原理<ul><li>内存空间被分为系统区和用户区</li><li>仅适合单用户单任务操作系统</li></ul></li><li>分配与释放</li><li>地址映射<ul><li>静态重定位</li></ul></li><li>单一连续分区的优缺点<ul><li>优点：<ol><li>不需要硬件支持</li><li>管理简单，开销小，装入内存的程序仅由分配程序参与管理</li><li>安全性高，除了系统区以外，用户区仅有一个程序，不存在多个程序相互影响的问题</li></ol></li><li>缺点：<ol><li>程序的地址空间受用户区地址空间的限制</li><li>由一个程序独占系统资源，会造成系统资源的严重浪费</li><li>不支持多用户</li></ol></li></ul></li></ol><h3 id="4-2-2固定分区存储管理"><a href="#4-2-2固定分区存储管理" class="headerlink" title="4.2.2固定分区存储管理"></a>4.2.2固定分区存储管理</h3><ol><li>实现原理<ul><li>将内存用户空间划分为若干个固定大小的区域，每个区域称为一个分区，可以装入一个用户程序运行，<strong>分区一旦划分完成，便在整个运行期间保持不变</strong>。</li></ul></li><li>分区划分<ul><li>分区大小相等</li><li>分区大小不想等</li></ul></li><li>数据结构</li><li>分配与释放</li><li>地址映射<ul><li>静态重定位</li></ul></li><li>固定分区分配的优缺点<ul><li>优点：简单易行、CPU利用率较高</li><li>缺点：程序大小受分区大小的限制、存储空间存在浪费</li></ul></li></ol><h3 id="4-2-3可变分区存储管理"><a href="#4-2-3可变分区存储管理" class="headerlink" title="4.2.3可变分区存储管理"></a>4.2.3可变分区存储管理</h3><ol><li>实现原理<ul><li>内存分区在程序运行时根据程序对内存空间的需要而动态建立，分区的划分时间、大小及位置都是动态的。</li></ul></li><li>数据结构<ul><li>通常使用的数据结构包括：已使用分区表、空闲区表以及空闲分区链</li></ul></li><li>分配算法<ul><li>最先适应算法<ul><li>循环最先适应算法</li></ul></li><li>最佳适应算法</li><li>最差适应算法</li></ul></li><li>分配与回收<ul><li>考虑对相邻的空闲分区进行合并</li></ul></li><li>地址映射<ul><li>动态重定位</li></ul></li><li>碎片问题<ul><li>“紧凑”技术</li></ul></li></ol><h3 id="4-2-4覆盖与交换技术"><a href="#4-2-4覆盖与交换技术" class="headerlink" title="4.2.4覆盖与交换技术"></a>4.2.4覆盖与交换技术</h3><ol><li>覆盖技术<ul><li>定义：</li></ul></li><li>交换技术<ul><li>定义：</li><li>按交换单位进行分类<ul><li>进程交换(进程对换、整体交换和整体对换)</li><li>页面交换(页面置换和页面对换)</li></ul></li><li>需解决的问题：<ul><li>对换空间的管理</li><li>交换时机和选择哪些进程交换</li></ul></li></ul></li></ol><h2 id="4-3分页式存储管理"><a href="#4-3分页式存储管理" class="headerlink" title="4.3分页式存储管理"></a>4.3分页式存储管理</h2><p>离散式分配方式，以页为基本单位</p><h3 id="4-3-1分页式存储管理概述"><a href="#4-3-1分页式存储管理概述" class="headerlink" title="4.3.1分页式存储管理概述"></a>4.3.1分页式存储管理概述</h3><ol><li>实现原理</li><li>逻辑地址结构</li><li>数据结构<ul><li>页表</li><li>内存空间使用表</li></ul></li></ol><h3 id="4-3-2分页式存储管理的地址变换机构"><a href="#4-3-2分页式存储管理的地址变换机构" class="headerlink" title="4.3.2分页式存储管理的地址变换机构"></a>4.3.2分页式存储管理的地址变换机构</h3>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第六章中央处理器</title>
    <link href="/2023/11/26/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/2023/11/26/%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="6-1CPU的组成与功能"><a href="#6-1CPU的组成与功能" class="headerlink" title="6.1CPU的组成与功能"></a>6.1CPU的组成与功能</h2><h3 id="1-CPU概述"><a href="#1-CPU概述" class="headerlink" title="1.CPU概述"></a>1.CPU概述</h3><p>计算机硬件体系架构遵循<strong>冯诺依曼计算机的基本原理</strong></p><ul><li>冯诺依曼计算机的主要功能部件<ul><li>运算器、控制器、存储器、输入和输出设备。</li></ul></li><li>冯诺依曼计算机的主要工作原理<ul><li>存储程序和程序控制。</li></ul></li></ul><h3 id="2-CPU基本组成"><a href="#2-CPU基本组成" class="headerlink" title="2.CPU基本组成"></a>2.CPU基本组成</h3><p>从整体来看可分为如下几部分：</p><ol><li><strong>控制单元</strong>(Control Unit)：用于产生各种控制信号</li><li><strong>算术逻辑单元</strong>(ALU)：算术和逻辑运算</li><li><strong>寄存器</strong>(Registers)：用来存放取出的指令和数据等信息</li><li><strong>寄存器文件</strong>(Registers File)：一组寄存器的集合，用于存储各种类型的数据。通常包含通用寄存器、专用寄存器等</li><li><strong>时钟和控制电路</strong>：<strong>CPU中的关键元素</strong>，用于同步各个部件的操作。</li><li><strong>数据通路</strong>(Data Bus)<strong>和地址总线</strong>(Address Bus)：数据通路负责在各个部件之间传输数据，而地址总线则用于指示内存中的特定位置。两者协同巩工作，使得指令和数据能够在CPU内部和外部存储器之间传递。</li><li><strong>中断系统</strong>(Interrupt System)：用于处理异常情况和特殊请求。</li></ol><p>若把CPU分为<strong>运算器</strong>和<strong>控制器</strong>两部分来看：</p><ul><li>运算器：逻辑门、算术电路、寄存器、选择器和控制信号生成逻辑</li><li>控制器：<ol><li>指令部件：从内存中取出指令并对指令操作码进行译码<ul><li>程序计数器：存放将要执行的指令的地址</li><li>指令寄存器：存放正在执行的指令</li><li>指令译码器：对暂存在指令寄存器IR中的指令的操作码进行译码</li><li>地址形成部件：根据指令的不同寻址方式，形成操作数的有效地址</li></ul></li><li>时序部件：产生一定的时序信号以保证机器的各个功能部件有节奏的进行信息传送、加工和信息存储<ul><li>脉冲源：用来产生具有一定频率和宽度的时钟脉冲信号为整个机器提供基准信号</li><li>启停控制逻辑：根据计算机的需要，可靠的开放或封锁脉冲，控制时序信号的发生或停止</li><li>节拍信号发生器：也叫脉冲分配器，产生各个机器周期中的节拍信号</li></ul></li><li>微操作信号发生器(操作控制器)：根据指令操作码的译码和时序信号，产生各种微操作控制信号<ul><li>根据指令的操作码的译码和时序信号，产生各种微操作控制信号，以便正确地选择数据通路，把有关数据打入到一个寄存器，从而完成取指令和执行指令的控制</li></ul></li><li>中断控制逻辑：用来控制中断的硬件逻辑<ul><li>用来控制中断的硬件逻辑</li></ul></li></ol></li></ul><h3 id="3-CPU主要功能"><a href="#3-CPU主要功能" class="headerlink" title="3.CPU主要功能"></a>3.CPU主要功能</h3><p>从CPU整体来看：</p><ul><li><p>CPU的任务</p><ul><li><strong>取指令</strong>：CPU必须从存储器(寄存器、cache、主存)读取指令。(<strong>Mem[PC++]-&gt;IR</strong>：回顾5.3.1)</li><li><strong>分析指令</strong>：必须对指令进行译码，以确定所要求的动作。</li><li><strong>取操作数</strong>：根据指令的地址码字段到存储器、寄存器或是I&#x2F;O设备中读取指令</li><li><strong>执行指令</strong>：对取出的操作数执行指令所规定的操作，并把执行结果写入存储器、寄存器或I&#x2F;O设备中。<ul><li>指令字-&gt;控制信号序列</li><li>信号序列-&gt;数据通路</li></ul></li></ul></li><li><p>CPU的功能</p><ul><li><strong>指令控制</strong>：保证机器按规定的顺序执行命令。</li><li><strong>操作控制</strong>：一条指令的功能往往由若干个操作的组合来实现的，因此CPU须管理这些操作，并产生完成这些操作所需的控制信号。</li><li><strong>时间控制</strong>：对各种操作实施时间上的控制。</li><li><strong>数据加工</strong>(<strong>CPU的根本任务</strong>)：对数据进行算术运算和逻辑运算处理。</li></ul></li></ul><p>从<strong>运算器</strong>和<strong>控制器</strong>两部分来看：</p><ul><li>运算器：<ul><li>数据加工：算术&#x2F;逻辑运算</li></ul></li><li>控制器：<ul><li>程序控制：程序中执行指令顺序控制</li><li>操作控制：将机器指令翻译成执行部件所需的操作控制信号(控制CPU内数据通路传送的部件)</li><li>时序控制：控制操作信号的产生时间、持续时间</li><li>异常控制：异常处理，外设交互</li></ul></li></ul><h3 id="4-CPU中的寄存器"><a href="#4-CPU中的寄存器" class="headerlink" title="4.CPU中的寄存器"></a>4.CPU中的寄存器</h3><ol><li>用户可见寄存器：允许机器语言或汇编语言的编程人员访问的寄存器。<ul><li>通用寄存器：可由程序员指定其功能，可以用来存放操作数或地址。</li><li>数据寄存器：仅可用于保存数据而不能用于操作数地址的运算。</li><li>地址寄存器：用于存放地址，也可用于特殊的寻址方式。</li><li>标志寄存器：用于保存状态标志。</li></ul></li><li>控制和状态寄存器：对用户透明，由控制器直接控制的寄存器<ul><li>程序计数器(PC)：存放下一条要待取指令在内存中的地址</li><li>指令寄存器(IR)：用来存放当前正在执行的指令</li><li>存储器地址寄存器(MAR)：用来存放将被访问的内存单元的地址</li><li>存储器数据寄存器(MDR)：用来存放将要存入存储器中的数据，或是从存储器读出的数据</li><li>程序状态字寄存器(PSW)：用来存放条件码和其它状态信息</li></ul></li><li>主要寄存器<ul><li>PC(Program Counter)程序计数器，必选</li><li>IR(Instruction Register)指令寄存器，可选</li><li>AR(Address Register)地址寄存器，可选</li><li>DR(Data Register)数据缓冲寄存器，可选</li><li>AC(Accumulate Count)累加寄存器，可选</li><li>PSW(Program Status Word)程序状态字，可选</li></ul></li></ol><h3 id="5-操作控制器"><a href="#5-操作控制器" class="headerlink" title="5.操作控制器"></a>5.操作控制器</h3><p>功能：取指令，将机器指令译码并生成执行部件控制信号序列，建立正确的数据通路，从而完成指令的正确执行。</p><ul><li>硬布线控制器 (时序逻辑型) (硬件实现) (实现较为复杂，从而推出微程序控制器)<ul><li>采用组合逻辑技术来实现，其控制单元由门电路组成的复杂树形网络</li></ul></li><li>微程序控制器 (存储程序型) (软件实现)<ul><li>采用存储逻辑实现。将微操作代码化，使每一条机器指令转化成为一段微程序并存入一个专门的存储器中，其中的微操作控制信号是由微指令产生</li></ul></li></ul><h2 id="6-2数据通路"><a href="#6-2数据通路" class="headerlink" title="6.2数据通路"></a>6.2数据通路</h2><p>(<em><strong>还没太搞清楚，只列举了一些知识点</strong></em>)</p><h3 id="1-数据通路基本概念"><a href="#1-数据通路基本概念" class="headerlink" title="1.数据通路基本概念"></a>1.数据通路基本概念</h3><p><strong>数据通路</strong>：执行部件间传送信息的路径。</p><ul><li>通路的建立由<strong>控制信号</strong>控制，受<strong>时钟驱动</strong>。</li><li>不同指令、同一指令在执行的不同阶段的数据通路不同。</li><li>数据通路分类：共享通路(总线)、专用通路。<ul><li>不同的数据通路对<strong>指令执行流程</strong>、<strong>执行效率</strong>以及<strong>微操作控制信号的时序安排</strong>有较大的影响。</li></ul></li></ul><h3 id="2-数据通路抽象模型"><a href="#2-数据通路抽象模型" class="headerlink" title="2.数据通路抽象模型"></a>2.数据通路抽象模型</h3><p>(唔，得搁置一段时间)</p><h3 id="3-D触发器定时模型"><a href="#3-D触发器定时模型" class="headerlink" title="3.D触发器定时模型"></a>3.D触发器定时模型</h3><p>(图片得搁置一段时间再补回来)<br>数据的定时间：</p><ul><li>时钟触发前输入须稳定一段<strong>建立时间</strong>(Setup Time)</li><li>时钟触发后输入须稳定一段<strong>保持时间</strong>(Hold Time)</li><li>时钟触发到输出稳定的时间<strong>触发器延迟</strong>(Clk_to_Q)</li></ul><h3 id="4-数据通路与时钟周期"><a href="#4-数据通路与时钟周期" class="headerlink" title="4.数据通路与时钟周期"></a>4.数据通路与时钟周期</h3><p>(后续补图)</p><h3 id="5-保持时间违例"><a href="#5-保持时间违例" class="headerlink" title="5.保持时间违例"></a>5.保持时间违例</h3><p>(后续补图)</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第五章 指令系统 知识点</title>
    <link href="/2023/11/24/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/11/24/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>什么是指令？</strong></p><ul><li>计算机能直接识别、执行的操作命令(机器指令)。</li><li>冯诺依曼结构计算机“程序控制”原理实现的载体。</li><li>软、硬件界面和程序员操作计算机硬件的接口。</li><li>硬件设计的依据和软件设计的基础，直接影响计算机系统的性能。</li></ul><p><strong>什么是指令系统？</strong></p><p>一台计算机或处理器能够识别和执行的所有计算机指令的集合。CPU通过执行一系列机器指令来完成各种计算和控制任务。<br>指令系统通常分为两种类型:<em><strong>精简指令系统计算机(RISC)</strong></em>,<em><strong>复杂指令系统计算机(CISC)</strong></em></p><p><strong>指令的分类</strong></p><ol><li><p><strong>根据计算机层次结构分类</strong></p><ul><li>高级语言指令、汇编语言指令、机器语言指令和微指令指令。</li></ul></li><li><p><strong>根据指令中地址码字段个数分类</strong></p><ul><li>三地址指令、二地址指令、一地址指令和零地址指令。地址个数越少，指令能够访问的范围越大。</li></ul></li><li><p><strong>根据指令中操作数的物理位置分类</strong></p><ul><li>存储器-存储器(SS)型。(该指令类型要访问两次主存，指令速度较慢，故已不存在)</li><li>寄存器-寄存器(RR)型。</li><li>寄存器-存储器(Rs)型。</li></ul></li><li><p><strong>根据指令的功能分类</strong></p><ul><li>传送指令、定点算术运算指令、位运算指令和控制转移指令。</li></ul></li></ol><p><strong>指令字长</strong></p><ul><li>指令中包含的二进制位数。</li><li>与机器字长相比：单字长、双字长、半字长等长度指令。</li><li>多字长指令(至少双字长)<ul><li>解决寻址较大存储空间的问题。(拓展技术)</li><li>取址多次访问，影响速度，占有空间大。</li></ul></li><li>等长指令：指令字长固定。(易于硬件的设计及简化)</li><li>变长指令：指令字长度根据需要可变。(怎加硬件设计和简化的难度)</li></ul><h2 id="5-1指令系统的发展"><a href="#5-1指令系统的发展" class="headerlink" title="5.1指令系统的发展"></a>5.1指令系统的发展</h2><p>为继承已有的软件，减少软件开发费用，诞生了<strong>系列计算机</strong>(<em>同一公司不同时期生产，基本系统结构和指令系统相同的计算机</em>)使得在旧机种上运行的软件可以不加任何修改地在新机种上运行。与之相对应的还有<strong>兼容机</strong>(<em>不同公司生产，基本系统结构和指令系统相同的计算机</em>)<br>随着计算机的发展，指令系统也趋于多用途、强功能化，但指令结构太复杂也会带来一些不利因素，因此提出了CISC和RISC。</p><h2 id="5-2指令格式"><a href="#5-2指令格式" class="headerlink" title="5.2指令格式"></a>5.2指令格式</h2><h3 id="5-2-1指令格式"><a href="#5-2-1指令格式" class="headerlink" title="5.2.1指令格式"></a>5.2.1指令格式</h3><p>一条指令一般包含</p><ol><li><strong>操作码</strong>：具体说明操作的性质及功能。</li><li><strong>操作数</strong>：指令的输入，即执行操作所需的数据或地址信息。</li><li><strong>寻址方式</strong>：如何找到或计算操作数的地址。</li><li><strong>操作控制码</strong>：有时候，指令可能包含一些额外的控制信息，用于指导处理器的具体行为。这可能包含标志位的设置、条件执行的控制等。</li><li><strong>拓展字段</strong>：有些指令可能包含拓展字段，用于提供额外的信息或操作码的变体。这对于支持复杂操作或者特殊功能非常有用。</li></ol><p>操作码字段的位数与支持的最大指令数量有关。</p><ul><li>对于定长操作码而言，操作码的长度&#x3D;log2N。</li><li>支持变长操作码时，操作码可向不用的地址码字段扩展。<br>寻址方式字段的位数与支持的寻址方式种类有关。<br>地址码字段的作用及影响与其位数和寻址方式有关。</li></ul><p><strong>根据地址码部分所给出地址的个数，对指令格式进行分类</strong></p><ol><li><strong>零地址指令</strong><ul><li>无需任何操作数，如空操作指令、停机指令等。</li><li>操作数地址默认，如堆栈结构计算机的运算指令，所需的操作数默认在堆栈中。</li></ul></li><li><strong>一地址指令</strong><ul><li>指令中只给出一个地址，该地址既是操作数地址，又是操作结果的存储地址。</li></ul></li><li><strong>二地址指令</strong><ul><li>最常见的指令格式两个地址指出两个源操作数地址，其中一个还是存放结果的地址。</li></ul></li><li><strong>三地址指令</strong><ul><li>对A1、A2地址指出的两个元操作数进行操作后，将结果存入目的地址A3。</li></ul></li><li><strong>多地址指令</strong><ul><li>在某些性能较强的计算机中，往往设置处理成批数据的指令。</li></ul></li></ol><h3 id="5-2-2指令操作码的扩展技术"><a href="#5-2-2指令操作码的扩展技术" class="headerlink" title="5.2.2指令操作码的扩展技术"></a>5.2.2指令操作码的扩展技术</h3><p>指令操作码通常有两种编码格式：<strong>固定个格式</strong>,<strong>可变格式</strong>。<br><strong>如何扩展</strong>：在指令字中用一个固定长度的字段表示基本操作码，而对于一部分不需要某个地址码的指令，把它们的操作码扩充到该地址字段。<br><strong>扩展技术使用原则</strong>：使用频度高的指令应分配短的操作码，使用频度低的指令相应地分配较长的操作码。<br><strong>霍夫曼编码的操作码</strong>：根据程序中指令出现频率高低而赋以不同长度的操作码。</p><p>虽然扩展码技术是一种重要的指令优化技术，可以缩短指令的平均长度，减少程序的总位数以及增加指令字所能表示的操作信息。<strong>但是</strong>，扩展操作码比固定操作码译码复杂，使控制器的设计难度增大，且需要更多的硬件支持。</p><h3 id="5-2-3指令长度与数据字长的关系"><a href="#5-2-3指令长度与数据字长的关系" class="headerlink" title="5.2.3指令长度与数据字长的关系"></a>5.2.3指令长度与数据字长的关系</h3><ul><li>数据字长决定了计算机的运算精度，字长越长，计算机的运算精度越高。</li><li>地址码长度决定了指令直接寻址能力。</li><li>为便于处理数据和尽可能地充分利用存储空间，一般机器的字长都是字节长度的1、2、4或8倍。</li><li>指令码的长度主要取决于操作码的长度、操作数地址的长度和操作数地址的个数。</li></ul><h2 id="5-3寻址方式"><a href="#5-3寻址方式" class="headerlink" title="5.3寻址方式"></a>5.3寻址方式</h2><p><strong>什么是寻址？</strong><br>确定本条指令的数据地址及下一条要执行的指令地址的方法，与计算机硬件结构紧密相连，而且对指令格式和功能有很大影响。不同计算机有不同的寻址方式，但基本原理是相同的。有的计算机寻址种类较少，因此在指令操作码中直接表示出寻址方式；而有的计算机采用多种寻址方式，因此在指令中专设一个字段表示一个操作数的来源或去向。</p><h3 id="5-3-1指令的寻址方式"><a href="#5-3-1指令的寻址方式" class="headerlink" title="5.3.1指令的寻址方式"></a>5.3.1指令的寻址方式</h3><ol><li><strong>顺序寻址</strong>：<ul><li>程序的指令序列在主存顺序存放。执行时<strong>从第一条执行开始</strong>，逐条取出并逐条执行。</li><li>CPU中设置<strong>程序计数器</strong>(PC)对指令的顺序号进行计数。PC开始时存放程序的首地址，每执行一条指令，PC加”<em><strong>1</strong></em>“(<em><strong>存储1条指令占用的字节单元数</strong></em>)，指出下一条指令的地址，直到程序结束。</li></ul></li><li><strong>跳跃寻址</strong><ul><li>通常通过跳转指令(分支指令)实现。</li></ul></li></ol><h3 id="5-3-2操作数寻址方式"><a href="#5-3-2操作数寻址方式" class="headerlink" title="5.3.2操作数寻址方式"></a>5.3.2操作数寻址方式</h3><ol><li><strong>立即数寻址</strong><ul><li>所需的操作数由指令的地址码部分直接给出。</li><li>特点：<ul><li>取指时，操作码和一个操作数同时被取出，减少了访问存储器的次数，提高了指令的执行速度。</li><li><strong>最大优点</strong>便于程序设计(变量赋初值)。</li><li>数据大小受字段数限制。</li><li>不能修改操作数数值。</li></ul></li></ul></li><li><strong>寄存器寻址</strong><ul><li>操作数在CPU的内部寄存器中</li><li>特点：<ul><li>操作数在寄存器中，指令执行速度快。</li><li>能访问的数据大小一般与计算机字长有关。该指令的地址码位数只影响能访问的寄存器个数，不影响访问数据的大小。</li><li>地址字段的位数与计算机通用寄存器数量相关。</li><li>缩短指令长度，节省存储空间。</li></ul></li></ul></li><li><strong>直接寻址</strong><ul><li>地址码字段直接给出操作数在内存中的地址。</li><li>特点：<ul><li>提供访问主存的操作。</li><li>获得数据要访问主存，指令执行速度慢。</li><li><strong>地址字段的位数决定了访存空间的大小</strong>，因此引入间接寻址。</li></ul></li></ul></li><li><strong>间接寻址</strong><ul><li>地址码字段给出的是操作数地址的地址。</li><li>特点：<ul><li><strong>解决了直接寻址方式下地址字段的位数限制访存范围大小的问题</strong>。</li><li>获得数据要访问主存2次，指令执行速度太慢。</li></ul></li></ul></li><li><strong>寄存器简介寻址</strong><ul><li>地址码字段给出的是寄存器编号。(先访问地址码字段给出的寄存器，在寄存器中获得操作数在主存中的位置)</li><li>特点：<ul><li>解决了直接寻址方式下地址字段的位数限制访存范围大小的问题。</li><li>获得数据只需访问主存一次。</li></ul></li></ul></li><li><strong>相对寻址</strong><ul><li>将程序计数器PC的内容与指令的地址码部分给出的位移量(Disp)之和作为操作数的地址或转移地址。</li><li>特点：<ul><li>可节省指令中的地址位数，便于程序在内存中成块移动。</li><li><strong>注意</strong>：<strong>PC的改变对计算的影响</strong>(回顾5.3.1 1.顺序寻址)</li></ul></li></ul></li><li><strong>基址寻址</strong><ul><li>在计算机中设置一个专用的基址寄存器，或由指令指定一个通用寄存器为基址寄存器。操作数地址由基址寄存器的内容和指令的地址码A相加得到。地址码A通常被称为位移量。</li><li>特点：<ul><li>使用基址寄存器可以访问更大的主存空间。</li><li>对某一程序而言，基址值设定后不变，故要访问不同数据需修改指令中地址码字段。</li></ul></li></ul></li><li><strong>变址寻址</strong><ul><li>指定一个变址寄存器，与本地指令地址无关，内容可随要求改变。</li><li>特点：<ul><li>不改变指令即可改变数据的有效地址，可在循环中使用。</li><li>在字符串处理，向量运算等等成批数据处理中非常有用。</li></ul></li></ul></li></ol><p><strong>总结</strong></p><ol><li>立即寻址     快，便于程序设计，赋初值，初值大小受限</li><li>寄存器寻址   快，便于程序设计，不能访问主存</li><li>直接寻址     慢，便于程序设计，提供访存，范围受限</li><li>间接寻址     很慢，解决直接寻址访存范围受限的问题</li><li>寄存器间接   慢，便于程序设计，提供访存，范围增大</li><li>相对寻址     慢，提供访存，不能再循环中使用</li><li>变址寻址     慢，便于程序设计，提供访存，可在循环中使用</li><li>基址寻址     慢，提供更大的范围的访存能力，不能在循环中使用</li></ol><h2 id="5-4指令格式设计"><a href="#5-4指令格式设计" class="headerlink" title="5.4指令格式设计"></a>5.4指令格式设计</h2><h3 id="5-4-1指令格式设计的主要内容"><a href="#5-4-1指令格式设计的主要内容" class="headerlink" title="5.4.1指令格式设计的主要内容"></a>5.4.1指令格式设计的主要内容</h3><ul><li>根据指令数量的要求及是否支持操作码扩展，确定操作码字段的位数。</li><li>根据对操作数的要求确定地址码字段的个数。</li><li>根据寻址方式的要求，为每个地址码字段确定寻址方式字段位数。</li><li>确定采用定长指令还是变长指令</li></ul><h3 id="5-4-2指令格式设计举例"><a href="#5-4-2指令格式设计举例" class="headerlink" title="5.4.2指令格式设计举例"></a>5.4.2指令格式设计举例</h3><p>(抱歉喔，这儿的例题估计得耽搁一段时间，还没搞懂hexo和markdown插入图片得方法)</p><h2 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h2><p>…<em><strong>未完待续</strong></em>…</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown</title>
    <link href="/2023/11/24/markdown/"/>
    <url>/2023/11/24/markdown/</url>
    
    <content type="html"><![CDATA[<p><a href="https://markdown.com.cn/basic-syntax/">官方教程</a></p><h2 id="1-标题语法"><a href="#1-标题语法" class="headerlink" title="1.标题语法"></a>1.标题语法</h2><p>创建标题时，在单词或短语前添加（#），（#）的数量代表标题的级别。例如，两个#表示创建一个二级标题。</p><h2 id="2-段落语法"><a href="#2-段落语法" class="headerlink" title="2.段落语法"></a>2.段落语法</h2><p>使用空白行将一行或多行文本进行分隔。<br>注意：不能使用空格和制表符缩进段落。</p><h2 id="3-换行语法"><a href="#3-换行语法" class="headerlink" title="3.换行语法"></a>3.换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键，即可创建一个换行。（但是直接回车也能够换行）</p><h2 id="4-强调语法"><a href="#4-强调语法" class="headerlink" title="4.强调语法"></a>4.强调语法</h2><p>通过将文本设置为粗体或斜体来强调其重要性。</p><h3 id="1-粗体-Bold"><a href="#1-粗体-Bold" class="headerlink" title="(1).粗体(Bold)"></a>(1).粗体(Bold)</h3><p>在单词或短语的前后各添加两个星号(**)或下划线(__)，为兼容考虑，在单词或短语中间部分进行加粗时请使用星号(*)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ I just love **bold text**.<br>$ I just love __bold text__.<br></code></pre></td></tr></table></figure><p>预览效果：<br>I just love <strong>bold text</strong>.<br>I just love <strong>bold text</strong>.</p><h3 id="2-斜体-Italic"><a href="#2-斜体-Italic" class="headerlink" title="(2).斜体(Italic)"></a>(2).斜体(Italic)</h3><p>在单词或短语前后添加一个星号(*)或下划线(_)。若用斜体突出单词中间部分，请在字母前后添加一个星号，中间不带空格。</p><h3 id="3-同时使用斜体和粗体"><a href="#3-同时使用斜体和粗体" class="headerlink" title="(3).同时使用斜体和粗体"></a>(3).同时使用斜体和粗体</h3><p>在单词或短语前后添加三个星号或下划线。</p><h2 id="5-引用语法"><a href="#5-引用语法" class="headerlink" title="5.引用语法"></a>5.引用语法</h2><p>创建块引用，在段落前添加一个(&gt;)符号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Dorothy followed her through many of the beautiful rooms <span class="hljs-keyword">in</span> her castle.<br></code></pre></td></tr></table></figure><p>预览效果：</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><h3 id="1-多个段落的块引用"><a href="#1-多个段落的块引用" class="headerlink" title="(1).多个段落的块引用"></a>(1).多个段落的块引用</h3><p>块引用可以包含多个段落。为段落之间的空白行添加一个(&gt;)符号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Dorothy followed her through many of the beautiful rooms <span class="hljs-keyword">in</span> her castle.<br>&gt;<br>&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.<br></code></pre></td></tr></table></figure><p>预览效果：</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote><h3 id="2-嵌套块引用"><a href="#2-嵌套块引用" class="headerlink" title="(2).嵌套块引用"></a>(2).嵌套块引用</h3><p>块引用可以嵌套。在要嵌套的段落前添加一个(&gt;&gt;)符号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Dorothy followed her through many of the beautiful rooms <span class="hljs-keyword">in</span> her castle.<br>&gt;<br>&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.<br></code></pre></td></tr></table></figure><p>效果预览：</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><blockquote><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote></blockquote><h3 id="3-带有其它元素的块引用"><a href="#3-带有其它元素的块引用" class="headerlink" title="(3).带有其它元素的块引用"></a>(3).带有其它元素的块引用</h3><p>块引用可以包含其他Markdown格式的元素。但并飞所有的元素都可以使用，需要进行实验以查看哪些元素有效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; <span class="hljs-comment">#### The quarterly results look great!</span><br>&gt;<br>&gt; - Revenue was off the chart.<br>&gt; - Profits were higher than ever.<br>&gt;<br>&gt; *Everything* is going according to **plan**.<br></code></pre></td></tr></table></figure><p>效果预览：</p><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul><p><em>Everything</em> is going according to <strong>plan</strong>.<br>综上呢，块引用可以在标题语法，强调语法和列表语法当中使用。</p></blockquote><h2 id="6-列表语法"><a href="#6-列表语法" class="headerlink" title="6.列表语法"></a>6.列表语法</h2><p>可以将多个条目组织成有序或无序列表。</p><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="(1).有序列表"></a>(1).有序列表</h3><p>每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但列表应当以数字1开始。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. First item<br>2. Second item<br>1. Third item<br></code></pre></td></tr></table></figure><p>预览效果：</p><ol><li>First item</li><li>Second item</li><li>Third item</li></ol><h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="(2).无序列表"></a>(2).无序列表</h3><p>在每个列表项前添加破折号(-)、星号(*)或加号(+)。缩进一个或多个列表项可创建嵌套列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">- First item<br>- Second item<br>- Third item<br>    - Indented item<br>    - Indented item<br>- Foruth item<br></code></pre></td></tr></table></figure><p>预览效果：</p><ul><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Foruth item<br>注意：不能在同一个列表中使用不同的符号。</li></ul><h3 id="3-在列表中嵌套其他元素"><a href="#3-在列表中嵌套其他元素" class="headerlink" title="(3).在列表中嵌套其他元素"></a>(3).在列表中嵌套其他元素</h3><p>要保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">- This is the first list item.<br>- Here<span class="hljs-string">&#x27;s the second list item.</span><br><span class="hljs-string">    I need to add anther paragraph below the second list item.</span><br><span class="hljs-string">- And here&#x27;</span>s the third item.<br></code></pre></td></tr></table></figure><p>预览效果：</p><ul><li>This is the first list item.</li><li>Here’s the second list item.<br>  I need to add anther paragraph below the second list item.</li><li>And here’s the third item.</li></ul><h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">- This is the first list item.<br>- Here<span class="hljs-string">&#x27;s the second list item.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt; A blockquote would look great below the second list item.</span><br><span class="hljs-string"></span><br><span class="hljs-string">- And here&#x27;</span>s the third list item.<br></code></pre></td></tr></table></figure><p>效果预览：</p><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><blockquote><p>A blockquote would look great below the second list item.</p></blockquote></li><li><p>And here’s the third list item.</p></li></ul><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>通常采用四个空格或一个制表符缩进。当代买块在列表中时，请将它们缩进八个空格或两个制表符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.  Open the file.<br>2.  Find the following code block on line 21:<br><br>        &lt;html&gt;<br>          &lt;<span class="hljs-built_in">head</span>&gt;<br>            &lt;title&gt;Test&lt;/title&gt;<br>          &lt;/head&gt;<br><br>3.  Update the title to match the name of your website.<br></code></pre></td></tr></table></figure><p>效果预览：</p><ol><li><p>Open the file.</p></li><li><p>Find the following code block on line 21:</p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;  &lt;/head&gt;</code></pre></li><li><p>Update the title to match the name of your website.</p></li></ol><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>通常使用</p><p>其中’Alt text’是图片的替代文本，’UPL’是图片链接地址。</p><ol><li><p>使用在线图片：如果需要插入的图片已经上传到互联网上，只需提供图片的URL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure></li><li><p>使用本地图片：可以使用相对或绝对路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure></li><li><p>添加替代文本：替代文本对于辅助技术和在加载图片失败时提供描述很重要。确保替代文本描述了图片的内容或作用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure></li></ol><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>顺序列表和无序列表可以相互嵌套。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. First item<br>2. Second item<br>3. Third item<br>    - Indented item<br>    - Indented item<br>4. Fourth item<br></code></pre></td></tr></table></figure><p>效果预览：</p><ol><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ol><h2 id="7-代码语法"><a href="#7-代码语法" class="headerlink" title="7.代码语法"></a>7.代码语法</h2><p>要将单词或短语表示为代码，请将其包裹在反引号(‘’)中。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">At</span> the <span class="hljs-keyword">command</span> prompt, <span class="hljs-keyword">type</span> `nano`.<br></code></pre></td></tr></table></figure><p>预览效果：<br>At the command prompt, type <code>nano</code>.</p><h3 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h3><p>若要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(&#96;&#96;)中。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">``Use `code` in your Markdown file.``<br></code></pre></td></tr></table></figure><p>预览效果：<br><code>Use `code` in your Markdown file.</code></p><h3 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h3><p>创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。(诶，没有用)<br>个人比较常用<strong>围栏代码块</strong><br>    -在代码块之前和之后的行上使用三个反引号 (&#96;&#96;&#96;)或三个波浪号(~~~)。</p><h2 id="8-分割线语法"><a href="#8-分割线语法" class="headerlink" title="8.分割线语法"></a>8.分割线语法</h2><p>在单独一行上使用三个或多个星号(***)、破折号(—)和下划线(___)，不能包含其他内容。<br><strong>注意</strong>：为了兼容性，请在分隔线的前后均添加空白行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">Try</span> <span class="hljs-string">to</span> <span class="hljs-string">put</span> <span class="hljs-string">a</span> <span class="hljs-string">blank</span> <span class="hljs-string">line</span> <span class="hljs-string">before...</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">...and</span> <span class="hljs-string">after</span> <span class="hljs-string">a</span> <span class="hljs-string">horizontal</span> <span class="hljs-string">rule.</span><br></code></pre></td></tr></table></figure><p>预览效果：</p><p>Try to put a blank line before…</p><hr><p>…and after a horizontal rule.</p><h2 id="9-链接语法"><a href="#9-链接语法" class="headerlink" title="9.链接语法"></a>9.链接语法</h2><p>超链接语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p><h3 id="给链接增加Title"><a href="#给链接增加Title" class="headerlink" title="给链接增加Title"></a>给链接增加Title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，title是可选的，<strong>跟链接地址之间以空格分隔</strong>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">这是一个链接 <span class="hljs-selector-attr">[Markdown语法]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//markdown.com.cn &quot;最好的markdown教程&quot;)。</span><br></code></pre></td></tr></table></figure><p>预览效果：<br>这是一个链接 <a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a>。</p><h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号(&lt;&gt;)可以很方便地把URL或者email地址变成可点击地链接。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;https://narkdown.<span class="hljs-keyword">com</span>.<span class="hljs-keyword">cn</span>&gt;<br>&lt;fake@example.<span class="hljs-keyword">com</span>&gt;<br></code></pre></td></tr></table></figure><p>预览效果：<br><a href="https://narkdown.com.cn/">https://narkdown.com.cn</a><br><a href="mailto:&#102;&#97;&#x6b;&#x65;&#64;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;">&#102;&#97;&#x6b;&#x65;&#64;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;</a></p><h3 id="带格式化地链接"><a href="#带格式化地链接" class="headerlink" title="带格式化地链接"></a>带格式化地链接</h3><p>强调链接，在链接语法前后增加星号。若要将链接表示为代码，需在方括号中添加反引号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">I love supporting the <span class="hljs-strong">**[<span class="hljs-string">EFF</span>](<span class="hljs-link">https://eff.org</span>)**</span>.<br>This is the <span class="hljs-emphasis">*[<span class="hljs-string">Markdown Guide</span>](<span class="hljs-link">https://www.markdownguide.org</span>)*</span>.<br>See the section on [<span class="hljs-string">`code`</span>](<span class="hljs-link">#code</span>).<br></code></pre></td></tr></table></figure><p>预览效果：<br>I love supporting the <strong><a href="https://eff.org/">EFF</a></strong>.<br>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.<br>See the section on <a href="#code"><code>code</code></a>.</p><h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>引用样式链接是一种特殊链接，它使URL在markdown中更易于显示和阅读。该链接分为两部分：与文本保持内联地部分以及存储在文件中其他位置的部分，以使文本易于阅读。(哎哟，其实就类似于函数定义和函数引用)</p><h4 id="链接的第一部分格式"><a href="#链接的第一部分格式" class="headerlink" title="链接的第一部分格式"></a>链接的第一部分格式</h4><p>使用两组方括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组方括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。应在两组括号间添加一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。例如：<code>[hobbit-hole] [1]</code></p><h4 id="链接的第二部分格式"><a href="#链接的第二部分格式" class="headerlink" title="链接的第二部分格式"></a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：</p><ol><li>放在括号中的标签，其后紧跟一个冒号和至少一个空格(例如 <code>[label]:</code>)。</li><li>链接的UPL，可以选择将其括在尖括号中。</li><li>链接的可选标题，可以将其括在双引号，单引号或括号中。<br>例如：<code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code><br><strong>注意</strong>：为提高兼容性，在处理URL中间的空格时，尽量使用<code>%20</code>代替空格<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">[<span class="hljs-keyword">link</span>]<br>(https:<span class="hljs-regexp">//</span>www.example.com/<span class="hljs-keyword">my</span>%20great%20page)<br></code></pre></td></tr></table></figure></li></ol><h2 id="10-图片语法"><a href="#10-图片语法" class="headerlink" title="10.图片语法"></a>10.图片语法</h2><p>…<em><strong>未完待续</strong></em>…</p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章 处理机调度与死锁</title>
    <link href="/2023/11/24/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81/"/>
    <url>/2023/11/24/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h2 id="3-1处理机调度"><a href="#3-1处理机调度" class="headerlink" title="3.1处理机调度"></a>3.1处理机调度</h2>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo</title>
    <link href="/2023/11/23/%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8hexo/"/>
    <url>/2023/11/23/%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="自用"><a href="#自用" class="headerlink" title="!!!自用!!!"></a>!!!<strong>自用</strong>!!!</h1><p>有很多地方还没搞懂。<br>    <a href="https://www.githubstatus.com/">https://www.githubstatus.com</a></p><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$   hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><h3 id="三种默认布局"><a href="#三种默认布局" class="headerlink" title="三种默认布局"></a>三种默认布局</h3><p>post：默认的文章布局。常使用此布局<br>page：用于创建独立的页面，通常不包含时间戳或归档信息，而是作为站点的独立页面存在（不太了解此布局，还未使用过该布局。后续补充）<br>draft：暂时不想发布的草稿文章，不会被默认生成静态文件，也不会在正式的博客页面中显示。</p><h3 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h3><p>编写完文章后，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>生成静态文件，以便后续部署到博客网站上。<br>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>在本地进行开发、调试和预览，可在本地浏览器中查看博客。<br>最后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>将生成的静态文件部署到指定的博客托管平台，使其可以在互联网上进行访问，注意在使用前须要进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;XXX&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;XXX&quot;</span><br></code></pre></td></tr></table></figure><p>操作</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
